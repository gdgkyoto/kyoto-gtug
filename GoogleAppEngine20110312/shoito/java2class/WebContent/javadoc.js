(function() {
if (!(document.head.innerHTML.indexOf('Generated by javadoc') > -1)) {
	return;
}

chrome.extension.sendRequest({"action": "isRunning"}, function(response) {
	if (response === null || response === '' || response === 'false') {
		return;
	}
	
	(function() {
		var _document = document;
		var options = response;
		
		//クラス名
		var className = "";
		try {
			className = _document.querySelector('html>body>dl>dt>pre>b').innerText;
			console.log(className);
		} catch (e) {
			try {
				var frame = _document.getElementsByName('classFrame')[0];
				_document = frame.contentDocument;
				frame.addEventListener('load', arguments.callee);
				
				className = _document.querySelector('html>body>dl>dt>pre>b').innerText;
				console.log(className);
			} catch (e2) {
				console.log(e2);
				return;
			}
		}
		
		var fields = extractFields(_document, options.showModifiers);
		var methods = extractMethods(_document, options.showModifiers);
	
		var classView = _document.createElement('div');
		classView.id = 'classView';
		classView.setAttribute('style', 'font-size: xx-small; z-index: 10; top:10px; right:10px; border: 1px solid; opacity: 0.8; box-shadow:0 0 3px #000; background-color:#fff; overflow: auto; max-height: 600px; max-width: 360px; position:fixed;');
		classView.innerHTML = buildHtml(className, fields, methods);
	
		_document.body.appendChild(classView);
	})();
	
	function extractFields(_document, showModifiers) {
		var fields = [];
		try {
			var nameRef = _document.getElementsByName('field_summary')[0];
			var fieldsTable = nameRef.nextElementSibling;
			if (fieldsTable == null) {
				fieldsTable = nameRef.parentElement.nextElementSibling;
			}
		
			var rows = fieldsTable.rows;
			for (var i = 0; i < rows.length; i++) {
				if (i == 0) continue;
				var fieldType = rows[i].cells[0].innerText;
				var fieldName = rows[i].cells[1].innerText.split(' ')[0];
				
				var modifier = '   ';
//				if (fieldType.indexOf('public ') > -1) {
//					if (showModifiers.showPublic != 'true') continue;
//					modifier = ' + ';
//					fieldType = fieldType.replace('public ', '');
//				} else if (fieldType.indexOf('protected ') > -1) {
//					if (showModifiers.showProtected != 'true') continue;
//					modifier = ' # ';
//					fieldType = fieldType.replace('protected ', '');
//				} else if (fieldType.indexOf('private ') > -1) {
//					if (showModifiers.showPrivate != 'true') continue;
//					modifier = ' - ';
//					fieldType = fieldType.replace('private ', '');
//				} else {
//					if (showModifiers.showNone != 'true') continue;
//				}

				if (fieldType.indexOf('protected ') > -1) {
					if (showModifiers.showProtected != 'true') continue;
					modifier = ' # ';
					fieldType = fieldType.replace('protected ', '');
				} else if (fieldType.indexOf('private ') > -1) {
					if (showModifiers.showPrivate != 'true') continue;
					modifier = ' - ';
					fieldType = fieldType.replace('private ', '');
				} else if (fieldType.indexOf('package private ') > -1) {
					if (showModifiers.showNone != 'true') continue;
					fieldType = fieldType.replace('package private ', '');
				} else {
					if (showModifiers.showPublic != 'true') continue;
					modifier = ' + ';
					fieldType = fieldType.replace('public ', '');
				}
				
				if (fieldType.indexOf('static') > -1) {
					fields[i] = ['<u>', modifier, '<a href=#', fieldName, ' style="color: #000; text-decoration: none;">', fieldName, '</a>', ' : ', fieldType.replace('static', '').trim(), '</u>'].join('');
				} else {
					fields[i] = [modifier, '<a href=#', fieldName, ' style="color: #000; text-decoration: none;">', fieldName, '</a>', ' : ', fieldType].join('');
				}
				console.log('fieldType:' + fieldType + "    fieldName:" + fieldName);
			}
		} catch (e) { console.log(e); }
		
		return fields;
	}
	
	function extractMethods(_document, showModifiers) {
		var methods = [];
		try {
			var nameRef = _document.getElementsByName('method_summary')[0];
			var methodsTable = nameRef.nextElementSibling;
			if (methodsTable == null) {
				methodsTable = nameRef.parentElement.nextElementSibling;
			}
		
			var rows = methodsTable.rows;
			for (var i = 0; i < rows.length; i++) {
				if (i == 0) continue;
			    var returnType = rows[i].cells[0].innerText;
			    var methodNameWithParams = rows[i].cells[1].getElementsByTagName('code')[0].innerText;

				var modifier = '   ';
				if (returnType.indexOf('protected ') > -1) {
					if (showModifiers.showProtected != 'true') continue;
					modifier = ' # ';
					returnType = returnType.replace('protected ', '');
				} else if (returnType.indexOf('private ') > -1) {
					if (showModifiers.showPrivate != 'true') continue;
					modifier = ' - ';
					returnType = returnType.replace('private ', '');
				} else if (returnType.indexOf('package private ') > -1) {
					if (showModifiers.showNone != 'true') continue;
					returnType = returnType.replace('package private ', '');
				} else {
					if (showModifiers.showPublic != 'true') continue;
					modifier = ' + ';
					returnType = returnType.replace('public ', '');
				} 
				
				var aName = _document.querySelectorAll('a[name^="' + methodNameWithParams.split('(')[0] + '"]')[0];
				if (returnType.indexOf('static') > -1) {
					methods[i] = ['<u>', modifier,  '<a href=#', aName.name, ' style="color: #000; text-decoration: none;">', methodNameWithParams, '</a>', ' : ', returnType.replace('static', '').trim(), '</u>'].join('');
				} else {
					methods[i] = [modifier,  '<a href=#', aName.name, ' style="color: #000; text-decoration: none;">', methodNameWithParams, '</a>', ' : ', returnType].join('');
				}
			    console.log('returnType:' + returnType + "    methodNameWithParams:" + methodNameWithParams);
			}
		} catch (e) { console.log(e); }
		
		return methods;
	}
	
	function buildHtml(className, fields, methods) {
		return ['<h3 style="padding: 0 6px;">', 
		        '<a href="#skip-navbar_top" style="color: #000; text-decoration: none;">', className, '</a>', 
		        '</h3>', 
		        '<hr>', 
		        '<div style="padding: 0 6px;">', fields.join('<p style="margin-top: 0; margin-bottom: 0;">'), '</div>', 
		        '<hr>', 
		        '<div style="padding: 0 6px;">',  methods.join('<p style="margin-top: 0; margin-bottom: 0;">'), '</div>'
		        ].join('')
	}
});
})();